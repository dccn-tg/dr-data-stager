// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteJobID(params *DeleteJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobIDOK, error)

	GetCollectionTypeProjectNumber(params *GetCollectionTypeProjectNumberParams, opts ...ClientOption) (*GetCollectionTypeProjectNumberOK, error)

	GetDir(params *GetDirParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDirOK, error)

	GetJobID(params *GetJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobIDOK, error)

	GetJobs(params *GetJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobsOK, error)

	GetJobsStatus(params *GetJobsStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobsStatusOK, error)

	GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error)

	GetRdmTypeProjectNumber(params *GetRdmTypeProjectNumberParams, opts ...ClientOption) (*GetRdmTypeProjectNumberOK, error)

	PostJob(params *PostJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostJobOK, error)

	PostJobs(params *PostJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostJobsOK, *PostJobsMultiStatus, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteJobID cancels a stager job
*/
func (a *Client) DeleteJobID(params *DeleteJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteJobID",
		Method:             "DELETE",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteJobIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJobID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCollectionTypeProjectNumber retrieves r d r data collection associated with a project
*/
func (a *Client) GetCollectionTypeProjectNumber(params *GetCollectionTypeProjectNumberParams, opts ...ClientOption) (*GetCollectionTypeProjectNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectionTypeProjectNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCollectionTypeProjectNumber",
		Method:             "GET",
		PathPattern:        "/collection/{type}/project/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectionTypeProjectNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCollectionTypeProjectNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCollectionTypeProjectNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDir gets entities within a filesystem path
*/
func (a *Client) GetDir(params *GetDirParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDirOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDirParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDir",
		Method:             "GET",
		PathPattern:        "/dir",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDirReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDirOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDir: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJobID gets stager job information
*/
func (a *Client) GetJobID(params *GetJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobID",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJobID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJobs gets all jobs of a user
*/
func (a *Client) GetJobs(params *GetJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobs",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJobsStatus gets list of jobs at given status
*/
func (a *Client) GetJobsStatus(params *GetJobsStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobsStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobsStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobsStatus",
		Method:             "GET",
		PathPattern:        "/jobs/{status}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobsStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobsStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJobsStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPing checks API server health
*/
func (a *Client) GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPing",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRdmTypeProjectNumber retrieves r d r data collection associated with a project
*/
func (a *Client) GetRdmTypeProjectNumber(params *GetRdmTypeProjectNumberParams, opts ...ClientOption) (*GetRdmTypeProjectNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRdmTypeProjectNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRdmTypeProjectNumber",
		Method:             "GET",
		PathPattern:        "/rdm/{type}/project/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRdmTypeProjectNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRdmTypeProjectNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRdmTypeProjectNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostJob creates a new stager job
*/
func (a *Client) PostJob(params *PostJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostJob",
		Method:             "POST",
		PathPattern:        "/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostJobs creates multiple new stager jobs
*/
func (a *Client) PostJobs(params *PostJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostJobsOK, *PostJobsMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostJobs",
		Method:             "POST",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostJobsOK:
		return value, nil, nil
	case *PostJobsMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
