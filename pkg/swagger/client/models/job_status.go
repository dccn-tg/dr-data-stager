// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobStatus status of the background task.
//
// swagger:model jobStatus
type JobStatus struct {

	// number of attempts
	// Required: true
	Attempts *int64 `json:"attempts"`

	// job error message from the last execution.
	// Required: true
	Error *string `json:"error"`

	// job progress info from the last execution.
	// Required: true
	Progress *JobProgress `json:"progress"`

	// job status from the last execution.
	// Required: true
	// Enum: [waiting processing failed succeeded canceled]
	Status *string `json:"status"`
}

// Validate validates this job status
func (m *JobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) validateAttempts(formats strfmt.Registry) error {

	if err := validate.Required("attempts", "body", m.Attempts); err != nil {
		return err
	}

	return nil
}

func (m *JobStatus) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *JobStatus) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", m.Progress); err != nil {
		return err
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

var jobStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["waiting","processing","failed","succeeded","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobStatusTypeStatusPropEnum = append(jobStatusTypeStatusPropEnum, v)
	}
}

const (

	// JobStatusStatusWaiting captures enum value "waiting"
	JobStatusStatusWaiting string = "waiting"

	// JobStatusStatusProcessing captures enum value "processing"
	JobStatusStatusProcessing string = "processing"

	// JobStatusStatusFailed captures enum value "failed"
	JobStatusStatusFailed string = "failed"

	// JobStatusStatusSucceeded captures enum value "succeeded"
	JobStatusStatusSucceeded string = "succeeded"

	// JobStatusStatusCanceled captures enum value "canceled"
	JobStatusStatusCanceled string = "canceled"
)

// prop value enum
func (m *JobStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job status based on the context it is used
func (m *JobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {

		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobStatus) UnmarshalBinary(b []byte) error {
	var res JobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
