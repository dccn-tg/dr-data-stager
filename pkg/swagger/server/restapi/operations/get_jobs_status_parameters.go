// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetJobsStatusParams creates a new GetJobsStatusParams object
//
// There are no default values defined in the spec.
func NewGetJobsStatusParams() GetJobsStatusParams {

	return GetJobsStatusParams{}
}

// GetJobsStatusParams contains all the bound params for the get jobs status operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetJobsStatus
type GetJobsStatusParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*job status
	  Required: true
	  In: path
	*/
	Status string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetJobsStatusParams() beforehand.
func (o *GetJobsStatusParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rStatus, rhkStatus, _ := route.Params.GetOK("status")
	if err := o.bindStatus(rStatus, rhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindStatus binds and validates parameter Status from path.
func (o *GetJobsStatusParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Status = raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetJobsStatusParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.EnumCase("status", "path", o.Status, []interface{}{"scheduled", "pending", "active", "retry", "completed", "archived"}, true); err != nil {
		return err
	}

	return nil
}
