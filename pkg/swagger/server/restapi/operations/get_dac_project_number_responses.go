// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dccn-tg/dr-data-stager/pkg/swagger/server/models"
)

// GetDacProjectNumberOKCode is the HTTP code returned for type GetDacProjectNumberOK
const GetDacProjectNumberOKCode int = 200

/*
GetDacProjectNumberOK success

swagger:response getDacProjectNumberOK
*/
type GetDacProjectNumberOK struct {

	/*
	  In: Body
	*/
	Payload *models.Collection `json:"body,omitempty"`
}

// NewGetDacProjectNumberOK creates GetDacProjectNumberOK with default headers values
func NewGetDacProjectNumberOK() *GetDacProjectNumberOK {

	return &GetDacProjectNumberOK{}
}

// WithPayload adds the payload to the get dac project number o k response
func (o *GetDacProjectNumberOK) WithPayload(payload *models.Collection) *GetDacProjectNumberOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dac project number o k response
func (o *GetDacProjectNumberOK) SetPayload(payload *models.Collection) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDacProjectNumberOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDacProjectNumberNotFoundCode is the HTTP code returned for type GetDacProjectNumberNotFound
const GetDacProjectNumberNotFoundCode int = 404

/*
GetDacProjectNumberNotFound collection not found

swagger:response getDacProjectNumberNotFound
*/
type GetDacProjectNumberNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDacProjectNumberNotFound creates GetDacProjectNumberNotFound with default headers values
func NewGetDacProjectNumberNotFound() *GetDacProjectNumberNotFound {

	return &GetDacProjectNumberNotFound{}
}

// WithPayload adds the payload to the get dac project number not found response
func (o *GetDacProjectNumberNotFound) WithPayload(payload string) *GetDacProjectNumberNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dac project number not found response
func (o *GetDacProjectNumberNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDacProjectNumberNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetDacProjectNumberInternalServerErrorCode is the HTTP code returned for type GetDacProjectNumberInternalServerError
const GetDacProjectNumberInternalServerErrorCode int = 500

/*
GetDacProjectNumberInternalServerError failure

swagger:response getDacProjectNumberInternalServerError
*/
type GetDacProjectNumberInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseBody500 `json:"body,omitempty"`
}

// NewGetDacProjectNumberInternalServerError creates GetDacProjectNumberInternalServerError with default headers values
func NewGetDacProjectNumberInternalServerError() *GetDacProjectNumberInternalServerError {

	return &GetDacProjectNumberInternalServerError{}
}

// WithPayload adds the payload to the get dac project number internal server error response
func (o *GetDacProjectNumberInternalServerError) WithPayload(payload *models.ResponseBody500) *GetDacProjectNumberInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dac project number internal server error response
func (o *GetDacProjectNumberInternalServerError) SetPayload(payload *models.ResponseBody500) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDacProjectNumberInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
